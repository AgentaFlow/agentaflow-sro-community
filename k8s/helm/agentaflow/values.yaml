# Default values for agentaflow
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ghcr.io
  imagePullSecrets: []

# Web Dashboard configuration
dashboard:
  enabled: true
  replicaCount: 2
  
  image:
    repository: finoptimize/agentaflow-sro-community
    tag: web-dashboard-latest
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 9000
    metricsPort: 9001
    annotations: {}
  
  ingress:
    enabled: false
    className: nginx
    annotations: {}
      # cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: agentaflow.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []
      # - secretName: agentaflow-tls
      #   hosts:
      #     - agentaflow.example.com
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  env:
    - name: LOG_LEVEL
      value: "info"
    - name: GPU_SIMULATION
      value: "true"
    - name: ALERT_THRESHOLDS
      value: "temperature:80,utilization:95,memory:90"
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 65532
    fsGroup: 65532
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
  
  livenessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Kubernetes GPU Scheduler configuration
scheduler:
  enabled: true
  replicaCount: 1
  
  image:
    repository: finoptimize/agentaflow-sro-community
    tag: k8s-scheduler-latest
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8080
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 64Mi
  
  env:
    - name: SCHEDULER_PORT
      value: "8080"
    - name: STRATEGY
      value: "least-utilized"
    - name: LOG_LEVEL
      value: "info"
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 65532
    fsGroup: 65532
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false

# Prometheus configuration
prometheus:
  enabled: true
  
  image:
    repository: prom/prometheus
    tag: v2.47.0
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 9090
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessMode: ReadWriteOnce
  
  retention: 15d
  
  config:
    scrapeInterval: 10s
    evaluationInterval: 10s

# Grafana configuration
grafana:
  enabled: true
  
  image:
    repository: grafana/grafana
    tag: "10.1.4"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
  
  ingress:
    enabled: false
    className: nginx
    annotations: {}
    hosts:
      - host: grafana.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []
  
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi
  
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
    accessMode: ReadWriteOnce
  
  adminUser: admin
  adminPassword: "agentaflow123"  # Change in production!
  
  plugins:
    - grafana-piechart-panel

# Service Monitor for Prometheus Operator
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
  labels: {}

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress

# RBAC configuration
rbac:
  create: true

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations: {}

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}
