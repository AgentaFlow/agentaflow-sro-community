package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	
	"github.com/Finoptimize/agentaflow-sro-community/pkg/gpu"
	"github.com/Finoptimize/agentaflow-sro-community/pkg/observability"
)func main() {
	fmt.Println("üöÄ AgentaFlow SRO Community Edition with OpenTelemetry Tracing")

	// Initialize tracing
	tracingConfig := &observability.TracingConfig{
		ServiceName:    "agentaflow-sro-main",
		ServiceVersion: "0.1.0",
		Environment:    "development",
		ExporterType:   "jaeger",
		JaegerEndpoint: "http://localhost:14268/api/traces",
		SampleRate:     1.0,
	}

	tracingIntegration, err := observability.NewTracingIntegration(tracingConfig)
	if err != nil {
		log.Fatalf("‚ùå Failed to initialize tracing: %v", err)
	}
	defer func() {
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		if err := tracingIntegration.Shutdown(ctx); err != nil {
			log.Printf("‚ö†Ô∏è  Error shutting down tracing: %v", err)
		}
	}()

	fmt.Println("‚úÖ OpenTelemetry tracing initialized")

	// Initialize core components with tracing
	scheduler := &gpu.Scheduler{}
	tracedScheduler := tracingIntegration.WrapGPUScheduler(scheduler)

	collector := &gpu.MetricsCollector{}
	tracedCollector := tracingIntegration.WrapMetricsCollector(collector)

	monitoring := &observability.MonitoringService{}
	_ = tracingIntegration.WrapMonitoringService(monitoring)

	fmt.Println("‚úÖ Core components initialized with tracing")

	// Initialize web dashboard with tracing middleware
	tracingService := tracingIntegration.GetTracingService()
	
	fmt.Println("‚úÖ Web dashboard initialized")

	// Setup HTTP router with OpenTelemetry middleware
	router := mux.NewRouter()
	
	// Wrap router with tracing middleware
	tracedRouter := tracingService.TraceMiddleware()(router)
    // Add health check endpoint with custom tracing
	router.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()
		_, span := tracingService.TraceAPIRequest(ctx, "health_check", "/health")
		defer span.End()

		// Perform health checks
		healthData := tracingIntegration.HealthCheck()

		tracingService.AddSpanAttributes(span,
			attribute.String("health.status", "healthy"),
			attribute.Bool("tracing.enabled", true),
		)

		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, `{"status":"healthy","tracing":%v}`, healthData)
	}).Methods("GET")

	// Start background processes
	ctx := context.Background()

	// Start metrics collection with tracing
	fmt.Println("üìä Starting metrics collection...")
	if err := tracedCollector.Start(ctx); err != nil {
		log.Printf("‚ö†Ô∏è  Failed to start metrics collector: %v", err)
	}

	// Register some sample GPUs for demo purposes
	fmt.Println("üñ•Ô∏è  Registering sample GPUs...")
	sampleGPUs := []*gpu.GPU{
		{
			ID:          "gpu-001",
			Name:        "NVIDIA RTX 4090",
			MemoryTotal: 24576,
			Available:   true,
		},
		{
			ID:          "gpu-002",
			Name:        "NVIDIA A100",
			MemoryTotal: 40960,
			Available:   true,
		},
	}

	for _, g := range sampleGPUs {
		if err := tracedScheduler.RegisterGPU(ctx, g); err != nil {
			log.Printf("‚ö†Ô∏è  Failed to register GPU %s: %v", g.ID, err)
		} else {
			fmt.Printf("   ‚úÖ Registered %s\n", g.Name)
		}
	}

	// Start periodic background tasks with tracing
	go func() {
		ticker := time.NewTicker(30 * time.Second)
		defer ticker.Stop()

		for range ticker.C {
			ctx := context.Background()

			// Perform scheduled operations with tracing
			_, span := tracingService.TraceGPUScheduling(ctx, "periodic_schedule", "")

			if err := tracedScheduler.Schedule(ctx); err != nil {
				tracingService.RecordError(span, err)
				log.Printf("‚ö†Ô∏è  Periodic scheduling failed: %v", err)
			}

			span.End()

			// Collect metrics with tracing
			if _, err := tracedCollector.CollectMetrics(ctx); err != nil {
				log.Printf("‚ö†Ô∏è  Metrics collection failed: %v", err)
			}
		}
	}()

	// Start the HTTP server
	port := ":8080"
	fmt.Printf("üåê Starting web server on http://localhost%s\n", port)
	fmt.Printf("üìä Dashboard: http://localhost%s/dashboard\n", port)
	fmt.Printf("üè• Health check: http://localhost%s/health\n", port)
	fmt.Printf("üîç Tracing UI: http://localhost:16686 (Jaeger)\n")
	fmt.Println("\nüéØ All operations are now traced with OpenTelemetry!")

	server := &http.Server{
		Addr:    port,
		Handler: tracedRouter,
	}

	if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		log.Fatalf("‚ùå Server failed to start: %v", err)
	}
}
